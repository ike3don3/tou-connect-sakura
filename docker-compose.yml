version: '3.8'

services:
  # メインアプリケーション
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tou-connect-app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:password@db:5432/touconnect
      - REDIS_URL=redis://redis:6379/0
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
    restart: unless-stopped
    networks:
      - tou-connect-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tou-connect.rule=Host(`touconnect.com`)"
      - "traefik.http.routers.tou-connect.tls=true"
      - "traefik.http.routers.tou-connect.tls.certresolver=letsencrypt"

  # PostgreSQL データベース
  db:
    image: postgres:15-alpine
    container_name: tou-connect-db
    environment:
      - POSTGRES_DB=touconnect
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - tou-connect-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis キャッシュ
  redis:
    image: redis:7-alpine
    container_name: tou-connect-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - tou-connect-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx リバースプロキシ
  nginx:
    image: nginx:alpine
    container_name: tou-connect-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - tou-connect-network

  # Prometheus 監視
  prometheus:
    image: prom/prometheus:latest
    container_name: tou-connect-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - tou-connect-network

  # Grafana ダッシュボード
  grafana:
    image: grafana/grafana:latest
    container_name: tou-connect-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - tou-connect-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  tou-connect-network:
    driver: bridge
